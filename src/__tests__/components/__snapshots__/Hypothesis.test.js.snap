// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Componant tests Display an hypothesis, props hypothesis setted externaly 1`] = `
<Fragment>
  <WithStyles(Card)>
    <WithStyles(CardContent)>
      <Persona
        addStory={false}
        persona={
          Object {
            "Details": "Product Owner for a new product, work in a startup",
            "Id": "uOCF2GLFiJl6fvxdlq4b",
            "Name": "Paul Deligny",
            "Needs": Array [
              "To have a clear understanding about the product vision & objectives",
              "To write real User Stories, ie have a Customer Driven thinking",
              "To share at the right time and with the rigth level of information the User Stories with his team",
              "To have a clear vision on the job he'll have to do AND the job already or currently done",
            ],
            "Picture": "",
          }
        }
        selectedNeeds={3}
      />
    </WithStyles(CardContent)>
  </WithStyles(Card)>
  <WithStyles(Card)>
    <WithStyles(CardContent)>
      <WithStyles(Typography)
        variant="h2"
      >
        test
      </WithStyles(Typography)>
    </WithStyles(CardContent)>
  </WithStyles(Card)>
  <WithStyles(Card)>
    <WithStyles(CardContent)>
      <WithStyles(Typography)
        variant="h3"
      >
        Describe the 
        Paul Deligny
         Journey
      </WithStyles(Typography)>
      <Connect(CreateCard)
        hypothesisId="mockedId"
      />
      <Connect(CardsBoard)
        type="USER-STORY"
      >
        <Connect(CardsList)
          status={Symbol(TODO)}
          type="USER-STORY"
        />
      </Connect(CardsBoard)>
    </WithStyles(CardContent)>
  </WithStyles(Card)>
</Fragment>
`;

exports[`Containers tests Expect props onAction is defined 1`] = `
<ContextProvider
  value={
    Object {
      "store": Object {
        "dispatch": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
        Symbol(observable): [Function],
      },
      "storeState": Object {
        "cards": Object {
          "list": Array [],
          "status": Object {
            "HYPOTHESIS": Symbol(NULL),
            "TASK": Symbol(NULL),
            "USER-STORY": Symbol(NULL),
          },
        },
        "criterias": Object {
          "list": Object {
            "BASIC": Array [
              Object {
                "Id": "IdCritBas1",
                "Value": false,
              },
            ],
            "DEV": Array [
              Object {
                "Id": "IdCritDev1",
                "Text": "Development",
                "Value": false,
              },
              Object {
                "Id": "IdCritDev2",
                "Text": "Unit testing",
                "Value": false,
              },
            ],
          },
        },
        "personas": Object {
          "list": Object {
            "e6wTJIBsAw5puwwrNEsR": Object {
              "Details": "Meta persona, representing all collaborators working with Paul",
              "Name": "Feature Team",
              "Needs": Array [
                "To understand WHAT the Product Owner wants to be able to design collaborativly the HOW",
                "To manage easly the list of things to do to finish the most quickly the User Story",
              ],
              "Picture": "",
            },
            "uOCF2GLFiJl6fvxdlq4b": Object {
              "Details": "Product Owner for a new product, work in a startup",
              "Name": "Paul Deligny",
              "Needs": Array [
                "To have a clear understanding about the product vision & objectives",
                "To write real User Stories, ie have a Customer Driven thinking",
                "To share at the right time and with the rigth level of information the User Stories with his team",
                "To have a clear vision on the job he'll have to do AND the job already or currently done",
              ],
              "Picture": "",
            },
          },
        },
        "ui": Object {
          "currentHypothesis": undefined,
        },
      },
    }
  }
>
  <Connect(Hypothesis) />
  ,
</ContextProvider>
`;
