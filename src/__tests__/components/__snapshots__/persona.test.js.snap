// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Componant tests Display a persona and a specific needs 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Persona
    addStory={false}
    persona={
      Object {
        "Details": "Product Owner for a new product, work in a startup",
        "Id": "uOCF2GLFiJl6fvxdlq4b",
        "Name": "Paul Deligny",
        "Needs": Array [
          "To have a clear understanding about the product vision & objectives",
          "To write real User Stories, ie have a Customer Driven thinking",
          "To share at the right time and with the rigth level of information the User Stories with his team",
          "To have a clear vision on the job he'll have to do AND the job already or currently done",
        ],
        "Picture": "",
      }
    }
    selectedNeeds={1}
  >
    <div>
      Paul Deligny
      <ul>
        <li
          key="0"
        >
          To write real User Stories, ie have a Customer Driven thinking
        </li>
      </ul>
    </div>
  </Persona>
</Provider>
`;

exports[`Componant tests Display a persona with children 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Persona
    addStory={true}
    persona={
      Object {
        "Details": "Product Owner for a new product, work in a startup",
        "Id": "uOCF2GLFiJl6fvxdlq4b",
        "Name": "Paul Deligny",
        "Needs": Array [
          "To have a clear understanding about the product vision & objectives",
          "To write real User Stories, ie have a Customer Driven thinking",
          "To share at the right time and with the rigth level of information the User Stories with his team",
          "To have a clear vision on the job he'll have to do AND the job already or currently done",
        ],
        "Picture": "",
      }
    }
  >
    <div>
      Paul Deligny
      <ul>
        <li
          key="0"
        >
          To have a clear understanding about the product vision & objectives
          <Connect(CreateCard)
            personaId="uOCF2GLFiJl6fvxdlq4b"
            personaNeedsIndex={0}
          >
            <CreateCard
              onValidate={[Function]}
              personaId="uOCF2GLFiJl6fvxdlq4b"
              personaNeedsIndex={0}
            >
              <div
                className="create-card"
              >
                <button
                  onClick={[Function]}
                >
                  Create new task
                </button>
              </div>
            </CreateCard>
          </Connect(CreateCard)>
          <Connect(WithStyles(CardsBoard))
            type="HYPOTHESIS"
          >
            <WithStyles(CardsBoard)
              getCards={[Function]}
              type="HYPOTHESIS"
            >
              <CardsBoard
                classes={
                  Object {
                    "gridList": "CardsBoard-gridList-2",
                    "root": "CardsBoard-root-1",
                  }
                }
                getCards={[Function]}
                type="HYPOTHESIS"
              >
                <div
                  className="CardsBoard-root-1"
                >
                  <WithStyles(GridList)
                    className="CardsBoard-gridList-2"
                    cols={2.5}
                  >
                    <GridList
                      cellHeight={180}
                      className="CardsBoard-gridList-2"
                      classes={
                        Object {
                          "root": "MuiGridList-root-3",
                        }
                      }
                      cols={2.5}
                      component="ul"
                      spacing={4}
                    >
                      <ul
                        className="MuiGridList-root-3 CardsBoard-gridList-2"
                        style={
                          Object {
                            "margin": -2,
                          }
                        }
                      >
                        <Connect(CardsList)
                          filterBy={
                            Object {
                              "needsIndex": 0,
                              "persona": "uOCF2GLFiJl6fvxdlq4b",
                            }
                          }
                          key=".$.0"
                          status={Symbol(TODO)}
                          style={
                            Object {
                              "height": 184,
                              "padding": 2,
                              "width": "40%",
                            }
                          }
                          type="HYPOTHESIS"
                        >
                          <CardsList
                            filterBy={
                              Object {
                                "needsIndex": 0,
                                "persona": "uOCF2GLFiJl6fvxdlq4b",
                              }
                            }
                            list={Array []}
                            status={Symbol(TODO)}
                            style={
                              Object {
                                "height": 184,
                                "padding": 2,
                                "width": "40%",
                              }
                            }
                            type="HYPOTHESIS"
                          />
                        </Connect(CardsList)>
                      </ul>
                    </GridList>
                  </WithStyles(GridList)>
                </div>
              </CardsBoard>
            </WithStyles(CardsBoard)>
          </Connect(WithStyles(CardsBoard))>
        </li>
        <li
          key="1"
        >
          To write real User Stories, ie have a Customer Driven thinking
          <Connect(CreateCard)
            personaId="uOCF2GLFiJl6fvxdlq4b"
            personaNeedsIndex={1}
          >
            <CreateCard
              onValidate={[Function]}
              personaId="uOCF2GLFiJl6fvxdlq4b"
              personaNeedsIndex={1}
            >
              <div
                className="create-card"
              >
                <button
                  onClick={[Function]}
                >
                  Create new task
                </button>
              </div>
            </CreateCard>
          </Connect(CreateCard)>
          <Connect(WithStyles(CardsBoard))
            type="HYPOTHESIS"
          >
            <WithStyles(CardsBoard)
              getCards={[Function]}
              type="HYPOTHESIS"
            >
              <CardsBoard
                classes={
                  Object {
                    "gridList": "CardsBoard-gridList-2",
                    "root": "CardsBoard-root-1",
                  }
                }
                getCards={[Function]}
                type="HYPOTHESIS"
              >
                <div
                  className="CardsBoard-root-1"
                >
                  <WithStyles(GridList)
                    className="CardsBoard-gridList-2"
                    cols={2.5}
                  >
                    <GridList
                      cellHeight={180}
                      className="CardsBoard-gridList-2"
                      classes={
                        Object {
                          "root": "MuiGridList-root-3",
                        }
                      }
                      cols={2.5}
                      component="ul"
                      spacing={4}
                    >
                      <ul
                        className="MuiGridList-root-3 CardsBoard-gridList-2"
                        style={
                          Object {
                            "margin": -2,
                          }
                        }
                      >
                        <Connect(CardsList)
                          filterBy={
                            Object {
                              "needsIndex": 1,
                              "persona": "uOCF2GLFiJl6fvxdlq4b",
                            }
                          }
                          key=".$.0"
                          status={Symbol(TODO)}
                          style={
                            Object {
                              "height": 184,
                              "padding": 2,
                              "width": "40%",
                            }
                          }
                          type="HYPOTHESIS"
                        >
                          <CardsList
                            filterBy={
                              Object {
                                "needsIndex": 1,
                                "persona": "uOCF2GLFiJl6fvxdlq4b",
                              }
                            }
                            list={Array []}
                            status={Symbol(TODO)}
                            style={
                              Object {
                                "height": 184,
                                "padding": 2,
                                "width": "40%",
                              }
                            }
                            type="HYPOTHESIS"
                          />
                        </Connect(CardsList)>
                      </ul>
                    </GridList>
                  </WithStyles(GridList)>
                </div>
              </CardsBoard>
            </WithStyles(CardsBoard)>
          </Connect(WithStyles(CardsBoard))>
        </li>
        <li
          key="2"
        >
          To share at the right time and with the rigth level of information the User Stories with his team
          <Connect(CreateCard)
            personaId="uOCF2GLFiJl6fvxdlq4b"
            personaNeedsIndex={2}
          >
            <CreateCard
              onValidate={[Function]}
              personaId="uOCF2GLFiJl6fvxdlq4b"
              personaNeedsIndex={2}
            >
              <div
                className="create-card"
              >
                <button
                  onClick={[Function]}
                >
                  Create new task
                </button>
              </div>
            </CreateCard>
          </Connect(CreateCard)>
          <Connect(WithStyles(CardsBoard))
            type="HYPOTHESIS"
          >
            <WithStyles(CardsBoard)
              getCards={[Function]}
              type="HYPOTHESIS"
            >
              <CardsBoard
                classes={
                  Object {
                    "gridList": "CardsBoard-gridList-2",
                    "root": "CardsBoard-root-1",
                  }
                }
                getCards={[Function]}
                type="HYPOTHESIS"
              >
                <div
                  className="CardsBoard-root-1"
                >
                  <WithStyles(GridList)
                    className="CardsBoard-gridList-2"
                    cols={2.5}
                  >
                    <GridList
                      cellHeight={180}
                      className="CardsBoard-gridList-2"
                      classes={
                        Object {
                          "root": "MuiGridList-root-3",
                        }
                      }
                      cols={2.5}
                      component="ul"
                      spacing={4}
                    >
                      <ul
                        className="MuiGridList-root-3 CardsBoard-gridList-2"
                        style={
                          Object {
                            "margin": -2,
                          }
                        }
                      >
                        <Connect(CardsList)
                          filterBy={
                            Object {
                              "needsIndex": 2,
                              "persona": "uOCF2GLFiJl6fvxdlq4b",
                            }
                          }
                          key=".$.0"
                          status={Symbol(TODO)}
                          style={
                            Object {
                              "height": 184,
                              "padding": 2,
                              "width": "40%",
                            }
                          }
                          type="HYPOTHESIS"
                        >
                          <CardsList
                            filterBy={
                              Object {
                                "needsIndex": 2,
                                "persona": "uOCF2GLFiJl6fvxdlq4b",
                              }
                            }
                            list={Array []}
                            status={Symbol(TODO)}
                            style={
                              Object {
                                "height": 184,
                                "padding": 2,
                                "width": "40%",
                              }
                            }
                            type="HYPOTHESIS"
                          />
                        </Connect(CardsList)>
                      </ul>
                    </GridList>
                  </WithStyles(GridList)>
                </div>
              </CardsBoard>
            </WithStyles(CardsBoard)>
          </Connect(WithStyles(CardsBoard))>
        </li>
        <li
          key="3"
        >
          To have a clear vision on the job he'll have to do AND the job already or currently done
          <Connect(CreateCard)
            personaId="uOCF2GLFiJl6fvxdlq4b"
            personaNeedsIndex={3}
          >
            <CreateCard
              onValidate={[Function]}
              personaId="uOCF2GLFiJl6fvxdlq4b"
              personaNeedsIndex={3}
            >
              <div
                className="create-card"
              >
                <button
                  onClick={[Function]}
                >
                  Create new task
                </button>
              </div>
            </CreateCard>
          </Connect(CreateCard)>
          <Connect(WithStyles(CardsBoard))
            type="HYPOTHESIS"
          >
            <WithStyles(CardsBoard)
              getCards={[Function]}
              type="HYPOTHESIS"
            >
              <CardsBoard
                classes={
                  Object {
                    "gridList": "CardsBoard-gridList-2",
                    "root": "CardsBoard-root-1",
                  }
                }
                getCards={[Function]}
                type="HYPOTHESIS"
              >
                <div
                  className="CardsBoard-root-1"
                >
                  <WithStyles(GridList)
                    className="CardsBoard-gridList-2"
                    cols={2.5}
                  >
                    <GridList
                      cellHeight={180}
                      className="CardsBoard-gridList-2"
                      classes={
                        Object {
                          "root": "MuiGridList-root-3",
                        }
                      }
                      cols={2.5}
                      component="ul"
                      spacing={4}
                    >
                      <ul
                        className="MuiGridList-root-3 CardsBoard-gridList-2"
                        style={
                          Object {
                            "margin": -2,
                          }
                        }
                      >
                        <Connect(CardsList)
                          filterBy={
                            Object {
                              "needsIndex": 3,
                              "persona": "uOCF2GLFiJl6fvxdlq4b",
                            }
                          }
                          key=".$.0"
                          status={Symbol(TODO)}
                          style={
                            Object {
                              "height": 184,
                              "padding": 2,
                              "width": "40%",
                            }
                          }
                          type="HYPOTHESIS"
                        >
                          <CardsList
                            filterBy={
                              Object {
                                "needsIndex": 3,
                                "persona": "uOCF2GLFiJl6fvxdlq4b",
                              }
                            }
                            list={Array []}
                            status={Symbol(TODO)}
                            style={
                              Object {
                                "height": 184,
                                "padding": 2,
                                "width": "40%",
                              }
                            }
                            type="HYPOTHESIS"
                          />
                        </Connect(CardsList)>
                      </ul>
                    </GridList>
                  </WithStyles(GridList)>
                </div>
              </CardsBoard>
            </WithStyles(CardsBoard)>
          </Connect(WithStyles(CardsBoard))>
        </li>
      </ul>
    </div>
  </Persona>
</Provider>
`;

exports[`Componant tests Display a persona without children 1`] = `
<div>
  Paul Deligny
  <ul>
    <li
      key="0"
    >
      To have a clear understanding about the product vision & objectives
    </li>
    <li
      key="1"
    >
      To write real User Stories, ie have a Customer Driven thinking
    </li>
    <li
      key="2"
    >
      To share at the right time and with the rigth level of information the User Stories with his team
    </li>
    <li
      key="3"
    >
      To have a clear vision on the job he'll have to do AND the job already or currently done
    </li>
  </ul>
</div>
`;
